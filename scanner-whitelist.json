{"a4187ab84d8c610bb87d4f9fcfac3796":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/timber\/timber\/tests\/test-timber-image.php","exploit":"exec","line":null,"match":"exec(sprintf(\"rm -rf %s\", escapeshellarg($img_dir))); } $uploads = wp_upload_dir(); $files = glob($uploads['basedir'].date('\/Y\/m\/').'*'); foreach($files as $file){ if(is_file($file)) { unlink($file); } } parent::tearDown(); } function testThemeImageResize() { $theme_url = get_theme_root_uri().'\/'.get_stylesheet(); $source = __DIR__.'\/assets\/cardinals.jpg'; $dest = get_stylesheet_directory_uri().'\/cardinals.jpg'; if ( strpos($dest, 'http') === 0 ) { $dest = Timber\\URLHelper::url_to_file_system($dest); } $dest = self::maybe_realpath($dest); copy($source, $dest); $this->assertTrue(file_exists($dest)); $image = $theme_url.'\/cardinals.jpg'; $image = str_replace( 'http:\/\/example.org', '', $image ); $data = array(); $data['test_image'] = $image; $data['size'] = array( 'width' => 120, 'height' => 120 ); $str = Timber::compile( 'assets\/image-test.twig', $data ); $file_location = get_stylesheet_directory_uri().'\/cardinals-120x120-c-default.jpg'; if ( strpos($file_location, 'http') === 0 ) { $file_location = Timber\\URLHelper::url_to_file_system($file_location); } $file_location = self::maybe_realpath($file_location); $this->assertFileExists( $file_location ); $this->addFile( $file_location ); } function maybe_realpath( $path ) { if ( realpath($path) ) { return realpath($path); } return $path; } function testThemeImageLetterbox() { $theme_url = get_theme_root_uri().'\/'.get_stylesheet(); if ( ! extension_loaded( 'gd' ) ) { self::markTestSkipped( 'Letterbox image test requires GD extension' ); } $source = __DIR__.'\/assets\/cardinals.jpg'; $dest = self::maybe_realpath(get_template_directory()).'\/cardinals.jpg'; copy($source, $dest); $image = $theme_url.'\/cardinals.jpg'; $image = str_replace( 'http:\/\/example.org', '', $image ); $letterboxed = TimberImageHelper::letterbox( $image, 600, 300, '#FF0000' ); $this->assertFileExists( realpath(get_template_directory().'\/cardinals-lbox-600x300-FF0000.jpg') ); unlink( realpath(get_template_directory().'\/cardinals-lbox-600x300-FF0000.jpg') ); } function testImageWidthWithFilter() { $pid = $this->factory->post->create(); $photo = $this->copyTestImage(); $photo = TimberURLHelper::get_rel_path($photo); update_post_meta($pid, 'custom_photo', '\/'.$photo); $str = '{{TimberImage(post.custom_photo).width}}'; $post = new TimberPost($pid); $rendered = Timber::compile_string( $str, array('post' => $post) ); $this->assertEquals( 1500, $rendered ); } function testResizeNamed() { add_image_size('timber-testResizeNamed', $width = 600, $height = 400, $crop = true); $data = array(); $data['size'] = 'timber-testResizeNamed'; $upload_dir = wp_upload_dir(); self::copyTestImage(); $url = $upload_dir['url'].'\/arch.jpg'; $data['test_image'] = $url; Timber::compile('assets\/image-resize-named.twig', $data); $resized_path = $upload_dir['path'].'\/arch-'.$width.'x'.$height.'-c-default.jpg'; $this->assertFileExists($resized_path); $old_time = filemtime($resized_path); sleep(1); Timber::compile('assets\/image-resize-named.twig', $data); $new_time = filemtime($resized_path); $this->assertEquals($old_time, $new_time); } function testBogusResizeNamed() { $data = array(); $data['size'] = 'timber-foobar'; $upload_dir = wp_upload_dir(); self::copyTestImage(); $url = $upload_dir['url'].'\/arch.jpg'; $data['test_image'] = $url; $result = Timber::compile('assets\/image-resize-named.twig', $data); $this->assertEquals('<img src=\"'.$url.'\" \/>', trim($result)); } function testPostThumbnailsNamed() { add_image_size('timber-testPostThumbnailsNamed', $width = 100, $height = 50, $crop = true); $upload_dir = wp_upload_dir(); $post_id = $this->factory->post->create(); $filename = self::copyTestImage('flag.png'); $destination_url = str_replace(ABSPATH, 'http:\/\/'.$_SERVER['HTTP_HOST'].'\/', $filename); $wp_filetype = wp_check_filetype(basename($filename), null); $attachment = array( 'post_mime_type' => $wp_filetype['type'], 'post_title' => preg_replace('\/\\.[^.]+$\/', '', basename($filename)), 'post_content' => '', 'post_status' => 'inherit', ); $attach_id = wp_insert_attachment($attachment, $filename, $post_id); add_post_meta($post_id, '_thumbnail_id', $attach_id, true); $data = array(); $data['post'] = new TimberPost($post_id); $data['size'] = 'timber-testPostThumbnailsNamed'; Timber::compile('assets\/image-thumb-named.twig', $data); $resized_path = $upload_dir['path'].'\/flag-'.$width.'x'.$height.'-c-default.png'; $this->assertFileExists($resized_path); } function testPostThumbnailsWithWPName() { $upload_dir = wp_upload_dir(); $post_id = $this->factory->post->create(); $filename = self::copyTestImage('flag.png'); $destination_url = str_replace(ABSPATH, 'http:\/\/'.$_SERVER['HTTP_HOST'].'\/', $filename); $wp_filetype = wp_check_filetype(basename($filename), null); $attachment = array( 'post_mime_type' => $wp_filetype['type'], 'post_title' => preg_replace('\/\\.[^.]+$\/', '', basename($filename)), 'post_content' => '', 'post_status' => 'inherit', ); $attach_id = wp_insert_attachment($attachment, $filename, $post_id); add_post_meta($post_id, '_thumbnail_id', $attach_id, true); $data = array(); $data['post'] = new TimberPost($post_id); $data['size'] = 'medium'; $result = Timber::compile('assets\/image-thumb-named.twig', $data); $filename = 'flag-300x300-c-default.png'; $resized_path = $upload_dir['path'].'\/'.$filename; $this->assertFileExists($resized_path); $this->assertEquals('<img src=\"'.$upload_dir['url'].'\/'.$filename.'\" \/>', trim($result)); } function testImageSizeWithWPNameUsingNative(){ require_once('wp-overrides.php'); $filename = __DIR__.'\/assets\/tom-brady.jpg'; $filesize = filesize($filename); $data = array('tmp_name' => $filename, 'name' => 'tom-brady.jpg', 'type' => 'image\/jpg', 'size' => $filesize, 'error' => 0); $this->assertTrue(file_exists($filename)); $_FILES['tester'] = $data; $file_id = WP_Overrides::media_handle_upload('tester', 0, array(), array( 'test_form' => false)); if (!is_int($file_id)) { error_log(print_r($file_id, true)); } $image = new TimberImage($file_id); $str = '<img src=\"{{image.src(\\'medium\\')}}\" \/>'; $result = Timber::compile_string($str, array('image' => $image)); $upload_dir = wp_upload_dir(); $this->assertEquals('<img src=\"'.$upload_dir['url'].'\/'.$image->sizes['medium']['file'].'\" \/>', trim($result)); } function testImageSizeWithWPNameUsingNativeGif(){ require_once('wp-overrides.php'); $filename = __DIR__.'\/assets\/boyer.gif'; $filesize = filesize($filename); $data = array('tmp_name' => $filename, 'name' => 'boyer.gif', 'type' => 'image\/gif', 'size' => $filesize, 'error' => 0); $this->assertTrue(file_exists($filename)); $_FILES['tester'] = $data; $file_id = WP_Overrides::media_handle_upload('tester', 0, array(), array( 'test_form' => false)); if (!is_int($file_id)) { error_log(print_r($file_id, true)); } $image = new TimberImage($file_id); $str = '<img src=\"{{image.src(\\'medium\\')}}\" \/>'; $result = Timber::compile_string($str, array('image' => $image)); $upload_dir = wp_upload_dir(); $this->assertEquals('<img src=\"'.$upload_dir['url'].'\/'.$image->sizes['medium']['file'].'\" \/>', trim($result)); } function testGifToJpg() { if ( ! extension_loaded( 'gd' ) ) { self::markTestSkipped( 'JPEG conversion test requires GD extension' ); } $filename = self::copyTestImage('loading.gif'); $gif_url = str_replace(ABSPATH, 'http:\/\/'.$_SERVER['HTTP_HOST'].'\/', $filename); $str = '<img src=\"{{'.\"'$gif_url'\".'|tojpg}}\" \/>'; $result = Timber::compile_string($str); $jpg_url = str_replace('.gif', '.jpg', $gif_url); $this->assertEquals('<img src=\"'.$jpg_url.'\" \/>', $result); } function testImageHelperInit() { $helper = TimberImageHelper::init(); $this->assertTrue($helper); } function testResizeGif() { if ( ! extension_loaded( 'imagick' ) ) { self::markTestSkipped( 'Animated GIF resizing test requires Imagick extension' ); } $filename = self::copyTestImage('loading.gif'); $gif_url = str_replace(ABSPATH, 'http:\/\/'.$_SERVER['HTTP_HOST'].'\/', $filename); $str = '<img src=\"{{'.\"'$gif_url'\".'|resize(200)}}\" \/>'; $result = Timber::compile_string($str); $resized_url = str_replace('loading.gif', 'loading-200x0-c-default.gif', $gif_url); $resized_path = str_replace('http:\/\/example.org', ABSPATH, $resized_url); $resized_path = TimberURLHelper::remove_double_slashes($resized_path); $this->assertFileExists($resized_path); } function testImageNoParent() { $filename = self::copyTestImage( 'arch.jpg' ); $image = new TimberImage( $filename ); $this->assertFalse($image->parent()); } function testImageParent() { $post = $this->get_post_with_image(); $image = $post->thumbnail(); $this->assertEquals($post->ID, $image->parent()->ID); } function testPathInfo() { $filename = self::copyTestImage( 'arch.jpg' ); $image = new TimberImage( $filename ); $path_parts = $image->get_pathinfo(); $this->assertEquals('jpg', $path_parts['extension']); } function testTimberImageFromPost() { $post = $this->get_post_with_image(); $image = $post->thumbnail(); $post = get_post($post->ID); $str = '{{ TimberImage(post).src }}'; $result = Timber::compile_string( $str, array('post' => $post) ); $this->assertEquals($image->src(), $result); } function testTimberImageFromTimberImage() { $post = $this->get_post_with_image(); $image = $post->thumbnail(); $post = new TimberImage($image); $str = '{{ TimberImage(post).src }}'; $result = Timber::compile_string( $str, array('post' => $post) ); $this->assertEquals($image->src(), $result); } function testTimberImageFromTimberImageID() { $post = $this->get_post_with_image(); $image = $post->thumbnail(); $post = new TimberImage($image->ID); $str = '{{ TimberImage(post).src }}'; $result = Timber::compile_string( $str, array('post' => $post) ); $this->assertEquals($image->src(), $result); } function testTimberImageFromImageID() { $post = $this->get_post_with_image(); $image = $post->thumbnail(); $post = $image->ID; $str = '{{ TimberImage(post).src }}'; $result = Timber::compile_string( $str, array('post' => $post) ); $this->assertEquals($image->src(), $result); } function testTimberImageFromAttachment() { $iid = self::get_image_attachment(); $image = new TimberImage($iid); $post = get_post($iid); $str = '{{ TimberImage(post).src }}'; $result = Timber::compile_string( $str, array('post' => $post) ); $this->assertEquals($image->src(), $result); } function testTimberImageFromDocument() { $pid = $this->factory->post->create(); $iid = self::get_image_attachment($pid, 'dummy-pdf.pdf'); $attachment = new TimberImage($iid); $str = '{{ TimberImage(post).src }}'; $result = Timber::compile_string( $str, array('post' => $iid) ); $this->assertEquals('http:\/\/example.org\/wp-content\/uploads\/'.date('Y\/m').'\/dummy-pdf.pdf', $result); } function testNoThumbnail() { $pid = $this->factory->post->create(); $post = new TimberPost($pid); $str = Timber::compile_string('Image?{{post.thumbnail.src}}', array('post' => $post)); $this->assertEquals('Image?', $str); } function testFilteredImageURL() { add_filter('wp_get_attachment_image_src', function($image, $id, $size, $icon) { $image = str_replace('jpg', 'jpeg', $image); return $image; }, 10, 4); $post = $this->get_post_with_image(); $image = $post->thumbnail(); $str = '{{ post.thumbnail.src }}'; $result = Timber::compile_string( $str, array('post' => $post) ); $this->assertEquals('http:\/\/example.org\/wp-content\/uploads\/'.date('Y\/m').'\/arch.jpeg', $result); } function testTimberImageForExtraSlashes() { add_filter('upload_dir', array($this, '_filter_upload'), 10, 1); $post = $this->get_post_with_image(); $image = $post->thumbnail(); $resized_520_file = TimberImageHelper::resize($image->src, 520, 500); remove_filter('upload_dir', array($this, '_filter_upload')); $this->assertFalse(strpos($resized_520_file, '\/\/arch-520x500-c-default.jpg') > -1); } function _filter_upload($data) { $data['path'] = $data['basedir']; $data['url'] = $data['baseurl']; return $data; } function testAnimagedGifResizeWithoutImagick() { define('TEST_NO_IMAGICK', true); $image = self::copyTestImage('robocop.gif'); $data = array('crop' => 'default'); $data['size'] = array('width' => 90, 'height' => 90); $upload_dir = wp_upload_dir(); $url = $upload_dir['url'].'\/robocop.gif'; $data['test_image'] = $url; $str = Timber::compile( 'assets\/image-test.twig', $data ); $resized_path = $upload_dir['path'].'\/robocop-'.$data['size']['width'].'x'.$data['size']['height'].'-c-'.$data['crop'].'.gif'; $this->addFile( $resized_path ); $this->assertFileExists( $resized_path ); $this->assertFalse(TimberImageHelper::is_animated_gif($resized_path)); } function testSVGResize() { $image = self::copyTestImage('icon-twitter.svg'); $data = []; $data['size'] = array('width' => 100, 'height' => 50); $upload_dir = wp_upload_dir(); $data['test_image'] = $upload_dir['url'].'\/icon-twitter.svg'; $str = Timber::compile( 'assets\/image-test.twig', $data ); $this->assertEquals('<img src=\"http:\/\/example.org\/wp-content\/uploads\/'.date('Y\/m').'\/icon-twitter.svg\" \/>', trim($str)); } function testSVGLetterbox() { $image = self::copyTestImage('icon-twitter.svg'); $data = []; $data['size'] = array('width' => 100, 'height' => 50); $upload_dir = wp_upload_dir(); $data['test_image'] = $upload_dir['url'].'\/icon-twitter.svg'; $str = Timber::compile_string( '<img src=\"{{ test_image|letterbox(size.width, size.height) }}\" \/>', $data ); $this->assertEquals('<img src=\"http:\/\/example.org\/wp-content\/uploads\/'.date('Y\/m').'\/icon-twitter.svg\" \/>', trim($str)); } function testSVGRetina() { $image = self::copyTestImage('icon-twitter.svg'); $data = []; $upload_dir = wp_upload_dir(); $data['test_image'] = $upload_dir['url'].'\/icon-twitter.svg'; $str = Timber::compile_string( '<img src=\"{{ test_image|retina(2) }}\" \/>', $data ); $this->assertEquals('<img src=\"http:\/\/example.org\/wp-content\/uploads\/'.date('Y\/m').'\/icon-twitter.svg\" \/>', trim($str)); } function testSVGtoJPG() { $image = self::copyTestImage('icon-twitter.svg'); $data = []; $upload_dir = wp_upload_dir(); $data['test_image'] = $upload_dir['url'].'\/icon-twitter.svg'; $str = Timber::compile_string( '<img src=\"{{ test_image|tojpg }}\" \/>', $data ); $this->assertEquals('<img src=\"http:\/\/example.org\/wp-content\/uploads\/'.date('Y\/m').'\/icon-twitter.svg\" \/>', trim($str))"},"e7103eb4bd887cde920d48b52c36202d":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/timber\/timber\/tests\/test-timber-static.php","exploit":"eval_strrev","line":72,"match":"lave"},"b90819487db6b97c7993e52445b67d10":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/twig\/twig\/src\/Node\/CheckSecurityNode.php","exploit":"double_var2","line":40,"match":"${$type}"},"99d8183ab24a486a0eefbf5a079c557b":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/twig\/twig\/src\/Environment.php","exploit":"43b0d90f","line":418,"match":"eval('?>'.$content);"},"f000af6b264f273dad5cb2c39cf48a5a":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/twig\/twig\/src\/Environment.php","exploit":"eval","line":null,"match":"eval('?>'.$content); } if (!class_exists($cls, false)) { throw new RuntimeError(sprintf('Failed to load Twig template \"%s\", index \"%s\": cache might be corrupted.', $name, $index), -1, $source); } } } $this->extensionSet->initRuntime($this); return $this->loadedTemplates[$cls] = new $cls($this); } public function createTemplate($template, string $name = null) { $hash = hash('sha256', $template, false); if (null !== $name) { $name = sprintf('%s (string template %s)', $name, $hash); } else { $name = sprintf('__string_template__%s', $hash); } $loader = new ChainLoader([ new ArrayLoader([$name => $template]), $current = $this->getLoader(), ]); $this->setLoader($loader); try { return new TemplateWrapper($this, $this->loadTemplate($name)); } finally { $this->setLoader($current); } } public function isTemplateFresh($name, $time) { return $this->extensionSet->getLastModified() <= $time && $this->getLoader()->isFresh($name, $time); } public function resolveTemplate($names) { if (!\\is_array($names)) { $names = [$names]; } foreach ($names as $name) { if ($name instanceof Template) { return $name; } if ($name instanceof TemplateWrapper) { return $name; } try { return $this->loadTemplate($name); } catch (LoaderError $e) { if (1 === \\count($names)) { throw $e; } } } throw new LoaderError(sprintf('Unable to find one of the following templates: \"%s\".', implode('\", \"', $names))); } public function setLexer(Lexer $lexer) { $this->lexer = $lexer; } public function tokenize(Source $source) { if (null === $this->lexer) { $this->lexer = new Lexer($this); } return $this->lexer->tokenize($source); } public function setParser(Parser $parser) { $this->parser = $parser; } public function parse(TokenStream $stream) { if (null === $this->parser) { $this->parser = new Parser($this); } return $this->parser->parse($stream); } public function setCompiler(Compiler $compiler) { $this->compiler = $compiler; } public function compile(Node $node) { if (null === $this->compiler) { $this->compiler = new Compiler($this); } return $this->compiler->compile($node)->getSource(); } public function compileSource(Source $source) { try { return $this->compile($this->parse($this->tokenize($source))); } catch (Error $e) { $e->setSourceContext($source); throw $e; } catch (\\Exception $e) { throw new SyntaxError(sprintf('An exception has been thrown during the compilation of a template (\"%s\").', $e->getMessage()), -1, $source, $e); } } public function setLoader(LoaderInterface $loader) { $this->loader = $loader; } public function getLoader() { return $this->loader; } public function setCharset($charset) { if ('UTF8' === $charset = strtoupper($charset)) { $charset = 'UTF-8'; } $this->charset = $charset; } public function getCharset() { return $this->charset; } public function hasExtension($class) { return $this->extensionSet->hasExtension($class); } public function addRuntimeLoader(RuntimeLoaderInterface $loader) { $this->runtimeLoaders[] = $loader; } public function getExtension($class) { return $this->extensionSet->getExtension($class); } public function getRuntime($class) { if (isset($this->runtimes[$class])) { return $this->runtimes[$class]; } foreach ($this->runtimeLoaders as $loader) { if (null !== $runtime = $loader->load($class)) { return $this->runtimes[$class] = $runtime; } } throw new RuntimeError(sprintf('Unable to load the \"%s\" runtime.', $class)); } public function addExtension(ExtensionInterface $extension) { $this->extensionSet->addExtension($extension); $this->updateOptionsHash(); } public function setExtensions(array $extensions) { $this->extensionSet->setExtensions($extensions); $this->updateOptionsHash(); } public function getExtensions() { return $this->extensionSet->getExtensions(); } public function addTokenParser(TokenParserInterface $parser) { $this->extensionSet->addTokenParser($parser); } public function getTokenParsers() { return $this->extensionSet->getTokenParsers(); } public function getTags() { $tags = []; foreach ($this->getTokenParsers() as $parser) { $tags[$parser->getTag()] = $parser; } return $tags; } public function addNodeVisitor(NodeVisitorInterface $visitor) { $this->extensionSet->addNodeVisitor($visitor); } public function getNodeVisitors() { return $this->extensionSet->getNodeVisitors(); } public function addFilter(TwigFilter $filter) { $this->extensionSet->addFilter($filter); } public function getFilter($name) { return $this->extensionSet->getFilter($name); } public function registerUndefinedFilterCallback(callable $callable) { $this->extensionSet->registerUndefinedFilterCallback($callable); } public function getFilters() { return $this->extensionSet->getFilters(); } public function addTest(TwigTest $test) { $this->extensionSet->addTest($test); } public function getTests() { return $this->extensionSet->getTests(); } public function getTest($name) { return $this->extensionSet->getTest($name); } public function addFunction(TwigFunction $function) { $this->extensionSet->addFunction($function); } public function getFunction($name) { return $this->extensionSet->getFunction($name); } public function registerUndefinedFunctionCallback(callable $callable) { $this->extensionSet->registerUndefinedFunctionCallback($callable); } public function getFunctions() { return $this->extensionSet->getFunctions(); } public function addGlobal($name, $value) { if ($this->extensionSet->isInitialized() && !\\array_key_exists($name, $this->getGlobals())) { throw new \\LogicException(sprintf('Unable to add global \"%s\" as the runtime or the extensions have already been initialized.', $name)); } if (null !== $this->resolvedGlobals) { $this->resolvedGlobals[$name] = $value; } else { $this->globals[$name] = $value; } } public function getGlobals() { if ($this->extensionSet->isInitialized()) { if (null === $this->resolvedGlobals) { $this->resolvedGlobals = array_merge($this->extensionSet->getGlobals(), $this->globals); } return $this->resolvedGlobals; } return array_merge($this->extensionSet->getGlobals(), $this->globals); } public function mergeGlobals(array $context) { foreach ($this->getGlobals() as $key => $value) { if (!\\array_key_exists($key, $context)) { $context[$key] = $value; } } return $context; } public function getUnaryOperators() { return $this->extensionSet->getUnaryOperators(); } public function getBinaryOperators() { return $this->extensionSet->getBinaryOperators(); } private function updateOptionsHash() { $this->optionsHash = implode(':', [ $this->extensionSet->getSignature(), PHP_MAJOR_VERSION, PHP_MINOR_VERSION, self::VERSION, (int) $this->debug, $this->baseTemplateClass, (int) $this->strictVariables, ]); } } class_alias('Twig\\Environment', 'Twig_Environment')"},"15efdcab9db4e1289efe08b011ac390a":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/twig\/twig\/src\/Test\/IntegrationTestCase.php","exploit":"eval","line":null,"match":"eval('$ret = '.$condition.';'); if (!$ret) { $this->markTestSkipped($condition); } } $loader = new ArrayLoader($templates); foreach ($outputs as $i => $match) { $config = array_merge([ 'cache' => false, 'strict_variables' => true, ], $match[2] ? eval($match[2].';') : []); $twig = new Environment($loader, $config); $twig->addGlobal('global', 'global'); foreach ($this->getRuntimeLoaders() as $runtimeLoader) { $twig->addRuntimeLoader($runtimeLoader); } foreach ($this->getExtensions() as $extension) { $twig->addExtension($extension); } foreach ($this->getTwigFilters() as $filter) { $twig->addFilter($filter); } foreach ($this->getTwigTests() as $test) { $twig->addTest($test); } foreach ($this->getTwigFunctions() as $function) { $twig->addFunction($function); } $p = new \\ReflectionProperty($twig, 'templateClassPrefix'); $p->setAccessible(true); $p->setValue($twig, '__TwigTemplate_'.hash('sha256', uniqid(mt_rand(), true), false).'_'); $deprecations = []; try { $prevHandler = set_error_handler(function ($type, $msg, $file, $line, $context = []) use (&$deprecations, &$prevHandler) { if (E_USER_DEPRECATED === $type) { $deprecations[] = $msg; return true; } return $prevHandler ? $prevHandler($type, $msg, $file, $line, $context) : false; }); $template = $twig->load('index.twig'); } catch (\\Exception $e) { if (false !== $exception) { $message = $e->getMessage(); $this->assertSame(trim($exception), trim(sprintf('%s: %s', \\get_class($e), $message))); $last = substr($message, \\strlen($message) - 1); $this->assertTrue('.' === $last || '?' === $last, 'Exception message must end with a dot or a question mark.'); return; } throw new Error(sprintf('%s: %s', \\get_class($e), $e->getMessage()), -1, null, $e); } finally { restore_error_handler(); } $this->assertSame($deprecation, implode(\"\\n\", $deprecations)); try { $output = trim($template->render(eval($match[1].';')), \"\\n \"); } catch (\\Exception $e) { if (false !== $exception) { $this->assertSame(trim($exception), trim(sprintf('%s: %s', \\get_class($e), $e->getMessage()))); return; } $e = new Error(sprintf('%s: %s', \\get_class($e), $e->getMessage()), -1, null, $e); $output = trim(sprintf('%s: %s', \\get_class($e), $e->getMessage())); } if (false !== $exception) { list($class) = explode(':', $exception); $constraintClass = class_exists('PHPUnit\\Framework\\Constraint\\Exception') ? 'PHPUnit\\Framework\\Constraint\\Exception' : 'PHPUnit_Framework_Constraint_Exception'; $this->assertThat(null, new $constraintClass($class)); } $expected = trim($match[3], \"\\n \"); if ($expected !== $output) { printf(\"Compiled templates that failed on case %d:\\n\", $i + 1); foreach (array_keys($templates) as $name) { echo \"Template: $name\\n\"; echo $twig->compile($twig->parse($twig->tokenize($twig->getLoader()->getSourceContext($name)))); } } $this->assertEquals($expected, $output, $message.' (in '.$file.')'); } } protected static function parseTemplates($test) { $templates = []; preg_match_all('\/--TEMPLATE(?:\\((.*?)\\))?--(.*?)(?=\\-\\-TEMPLATE|$)\/s', $test, $matches, PREG_SET_ORDER); foreach ($matches as $match) { $templates[($match[1] ?: 'index.twig')] = $match[2]; } return $templates; } } class_alias('Twig\\Test\\IntegrationTestCase', 'Twig_Test_IntegrationTestCase')"},"4b948047f7baa22584691dfc5f64d563":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/twig\/twig\/src\/ExpressionParser.php","exploit":"nano","line":81,"match":"$op['callable']($this->parser, $expr)"},"7d4377c536523e6eb28e6b65ac4788c9":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/twig\/twig\/src\/Extension\/EscaperExtension.php","exploit":"nano","line":406,"match":"$escapers[$strategy]($env, $string, $charset)"},"992dd8102412fe941d3372b1685b3b9e":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/matthiasmullie\/minify\/src\/JS.php","exploit":"exec","line":null,"match":"exec(', 'test(', 'toSource(', 'toString(', ); $delimiters = array_fill(0, count($propertiesAndMethods), '\/'); $propertiesAndMethods = array_map('preg_quote', $propertiesAndMethods, $delimiters); $after = '(?=\\s*([\\.,;\\)\\}&\\|+]|\\\/\\\/|$|\\.('.implode('|', $propertiesAndMethods).')))'; $this->registerPattern('\/'.$before.'\\K'.$pattern.$after.'\/', $callback); $before = '\\)\\s*'; $after = '(?=\\s*\\.('.implode('|', $propertiesAndMethods).'))'; $this->registerPattern('\/'.$before.'\\K'.$pattern.$after.'\/', $callback); $operators = $this->getOperatorsForRegex($this->operatorsBefore, '\/'); $operators += $this->getOperatorsForRegex($this->keywordsReserved, '\/'); $after = '(?=\\s*\\n\\s*('.implode('|', $operators).'))'; $this->registerPattern('\/'.$pattern.$after.'\/', $callback); } protected function stripWhitespace($content) { $content = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $content); $content = preg_replace('\/[^\\S\\n]+\/', ' ', $content); $content = str_replace(array(\" \\n\", \"\\n \"), \"\\n\", $content); $content = preg_replace('\/\\n+\/', \"\\n\", $content); $operatorsBefore = $this->getOperatorsForRegex($this->operatorsBefore, '\/'); $operatorsAfter = $this->getOperatorsForRegex($this->operatorsAfter, '\/'); $operators = $this->getOperatorsForRegex($this->operators, '\/'); $keywordsBefore = $this->getKeywordsForRegex($this->keywordsBefore, '\/'); $keywordsAfter = $this->getKeywordsForRegex($this->keywordsAfter, '\/'); unset($operatorsBefore['+'], $operatorsBefore['-'], $operatorsAfter['+'], $operatorsAfter['-']); $content = preg_replace( array( '\/('.implode('|', $operatorsBefore).')\\s+\/', '\/\\s+('.implode('|', $operatorsAfter).')\/', ), '\\\\1', $content ); $content = preg_replace( array( '\/(?<![\\+\\-])\\s*([\\+\\-])(?![\\+\\-])\/', '\/(?<![\\+\\-])([\\+\\-])\\s*(?![\\+\\-])\/', ), '\\\\1', $content ); $content = preg_replace('\/(^|[;\\}\\s])\\K('.implode('|', $keywordsBefore).')\\s+\/', '\\\\2 ', $content); $content = preg_replace('\/\\s+('.implode('|', $keywordsAfter).')(?=([;\\{\\s]|$))\/', ' \\\\1', $content); $operatorsDiffBefore = array_diff($operators, $operatorsBefore); $operatorsDiffAfter = array_diff($operators, $operatorsAfter); $content = preg_replace('\/('.implode('|', $operatorsDiffBefore).')[^\\S\\n]+\/', '\\\\1', $content); $content = preg_replace('\/[^\\S\\n]+('.implode('|', $operatorsDiffAfter).')\/', '\\\\1', $content); $content = preg_replace('\/\\breturn\\s+([\"\\'\\\/\\+\\-])\/', 'return$1', $content); $content = preg_replace('\/\\)\\s+\\{\/', '){', $content); $content = preg_replace('\/}\\n(else|catch|finally)\\b\/', '}$1', $content); $content = preg_replace('\/\\bfor\\(([^;]*);;([^;]*)\\)\/', 'for(\\\\1;-;\\\\2)', $content); $content = preg_replace('\/;+\/', ';', $content); $content = preg_replace('\/\\bfor\\(([^;]*);-;([^;]*)\\)\/', 'for(\\\\1;;\\\\2)', $content); $content = preg_replace('\/(for\\([^;\\{]*;[^;\\{]*;[^;\\{]*\\));(\\}|$)\/s', '\\\\1;;\\\\2', $content); $content = preg_replace('\/(for\\([^;\\{]+\\s+in\\s+[^;\\{]+\\));(\\}|$)\/s', '\\\\1;;\\\\2', $content); $content = preg_replace('\/(while\\([^;\\{]+\\));(\\}|$)\/s', '\\\\1;;\\\\2', $content); $content = preg_replace('\/else;\/s', '', $content); $content = preg_replace('\/;(\\}|$)\/s', '\\\\1', $content); $content = ltrim($content, ';'); return trim($content); } protected function getOperatorsForRegex(array $operators, $delimiter = '\/') { $delimiters = array_fill(0, count($operators), $delimiter); $escaped = array_map('preg_quote', $operators, $delimiters); $operators = array_combine($operators, $escaped); unset($operators['+'], $operators['-']); $operators['.'] = '(?<![0-9]\\s)\\.'; $chars = preg_quote('+-*\\=<>%&|', $delimiter); $operators['='] = '(?<!['.$chars.'])\\='; return $operators; } protected function getKeywordsForRegex(array $keywords, $delimiter = '\/') { $delimiter = array_fill(0, count($keywords), $delimiter); $escaped = array_map('preg_quote', $keywords, $delimiter); array_walk($keywords, function ($value) { return '\\b'.$value.'\\b'; }); $keywords = array_combine($keywords, $escaped); return $keywords; } protected function propertyNotation($content) { $minifier = $this; $keywords = $this->keywordsReserved; $callback = function ($match) use ($minifier, $keywords) { $property = trim($minifier->extracted[$match[1]], '\\'\"'); if (in_array($property, $keywords)) { return $match[0]; } if (!preg_match('\/^'.$minifier::REGEX_VARIABLE.'$\/u', $property)) { return $match[0]; } return '.'.$property; }; preg_match('\/(\\[[^\\]]+\\])[^\\]]*$\/', static::REGEX_VARIABLE, $previousChar); $previousChar = $previousChar[1]; $keywords = $this->getKeywordsForRegex($keywords); $keywords = '(?<!'.implode(')(?<!', $keywords).')'; return preg_replace_callback('\/(?<='.$previousChar.'|\\])'.$keywords.'\\[\\s*(([\\'\"])[0-9]+\\\\2)\\s*\\]\/u', $callback, $content); } protected function shortenBools($content) { $callback = function ($match) { if (trim($match[1]) === '.') { return $match[0]; } return $match[1].($match[2] === 'true' ? '!0' : '!1'); }; $content = preg_replace_callback('\/(^|.\\s*)\\b(true|false)\\b(?!:)\/', $callback, $content); $content = preg_replace('\/\\bwhile\\(!0\\){\/', 'for(;;){', $content); preg_match_all('\/\\bdo\\b\/', $content, $dos, PREG_OFFSET_CAPTURE | PREG_SET_ORDER); $dos = array_reverse($dos); foreach ($dos as $do) { $offsetDo = $do[0][1]; preg_match_all('\/\\bfor\\(;;\\)\/', $content, $whiles, PREG_OFFSET_CAPTURE | PREG_SET_ORDER, $offsetDo); foreach ($whiles as $while) { $offsetWhile = $while[0][1]; $open = substr_count($content, '{', $offsetDo, $offsetWhile - $offsetDo); $close = substr_count($content, '}', $offsetDo, $offsetWhile - $offsetDo); if ($open === $close) { $content = substr_replace($content, 'while(!0)', $offsetWhile, strlen('for(;;)'))"},"f1a04e113931d067f2a93c210a2b67c4":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/lazy-blocks\/classes\/class-blocks.php","exploit":"nano","line":137,"match":"$options['inverse']()"},"c243cf105e5da4c3c032d409553bedac":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/lazy-blocks\/classes\/class-blocks.php","exploit":"nano","line":187,"match":"$options['fn']()"},"b38d14a0848ae39e84a9b281308cd55d":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/lazy-blocks\/classes\/class-blocks.php","exploit":"eval","line":null,"match":"eval( '?>' . $code ); return ob_get_clean(); } public function register_block_render() { $blocks = $this->get_blocks(); foreach ( $blocks as $block ) { $attributes = $this->prepare_block_attributes( $block['controls'], '', $block ); $data = array( 'attributes' => $attributes, 'render_callback' => array( $this, 'render_callback' ), ); register_block_type( $block['slug'], $data ); foreach ( $attributes as $attribute ) { if ( isset( $attribute['meta'] ) && $attribute['meta'] ) { register_meta( 'post', $attribute['meta'], array( 'show_in_rest' => true, 'single' => true, 'type' => $attribute['type'], 'default' => $attribute['default'], ) ); } } } } public function render_callback( $attributes, $content = null, $context = 'frontend' ) { if ( ! isset( $attributes['lazyblock'] ) || ! isset( $attributes['lazyblock']['slug'] ) ) { return null; } $block = $this->get_block( $attributes['lazyblock']['slug'] ); $context = 'editor' === $context ? 'editor' : 'frontend'; $result = null; $attributes = apply_filters( 'lzb\/block_render\/attributes', $attributes, $content, $block, $context ); $attributes = apply_filters( $block['slug'] . '\/' . $context . '_attributes', $attributes, $content, $block ); $attributes = apply_filters( $block['slug'] . '\/attributes', $attributes, $content, $block, $context ); $result = apply_filters( 'lzb\/block_render\/callback', $result, $attributes, $context ); $result = apply_filters( $block['slug'] . '\/' . $context . '_callback', $result, $attributes ); $result = apply_filters( $block['slug'] . '\/callback', $result, $attributes, $context ); $custom_render_name = $context . '_html'; if ( isset( $block['code']['output_method'] ) && isset( $block['code']['single_output'] ) && $block['code']['single_output'] ) { $custom_render_name = 'frontend_html'; } if ( ! $result && isset( $block['code'] ) ) { if ( isset( $block['code']['output_method'] ) && 'template' === $block['code']['output_method'] ) { ob_start(); $template_slug = str_replace( '\/', '-', $attributes['lazyblock']['slug'] ); $template_path_editor = '\/blocks\/' . $template_slug . '\/editor.php'; $template_path = '\/blocks\/' . $template_slug . '\/block.php'; $template_args = array( 'attributes' => $attributes, 'block' => $block, 'context' => $context, ); if ( 'editor' === $context && $this->template_exists( $template_path_editor, $template_args ) ) { $this->include_template( $template_path_editor, $template_args ); } elseif ( $this->template_exists( $template_path, $template_args ) ) { $this->include_template( $template_path, $template_args ); } else { $this->include_template( lazyblocks()->plugin_path . 'templates\/template-not-found.php', $template_args ); } $result = ob_get_clean(); } elseif ( isset( $block['code'][ $context . '_callback' ] ) && ! empty( $block['code'][ $context . '_callback' ] ) && is_callable( $block['code'][ $context . '_callback' ] ) ) { ob_start(); call_user_func( $block['code'][ $context . '_callback' ], $attributes ); $result = ob_get_clean(); } elseif ( isset( $block['code'][ $custom_render_name ] ) && ! empty( $block['code'][ $custom_render_name ] ) ) { if ( isset( $block['code']['output_method'] ) && 'php' === $block['code']['output_method'] ) { $result = $this->php_eval( $block['code'][ $custom_render_name ], $attributes ); } else { $result = $this->handlebars->render( $block['code'][ $custom_render_name ], $attributes ); } } } $allow_wrapper = apply_filters( 'lzb\/block_render\/allow_wrapper', $result && 'frontend' === $context, $attributes, $context ); $allow_wrapper = apply_filters( $block['slug'] . '\/' . $context . '_allow_wrapper', $allow_wrapper, $attributes ); $allow_wrapper = apply_filters( $block['slug'] . '\/allow_wrapper', $allow_wrapper, $attributes, $context ); if ( $allow_wrapper ) { $html_atts = ''; if ( ! isset( $attributes['className'] ) ) { $attributes['className'] = ''; } $attributes['className'] .= ' wp-block-' . str_replace( '\/', '-', $attributes['lazyblock']['slug'] ); if ( $attributes['blockUniqueClass'] ) { $attributes['className'] .= ' ' . $attributes['blockUniqueClass']; } if ( $attributes['align'] ) { $attributes['className'] .= ' align' . $attributes['align']; } if ( $attributes['className'] ) { $attributes['className'] = trim( $attributes['className'] ); $html_atts .= ' class=\"' . esc_attr( $attributes['className'] ) . '\"'; } if ( $attributes['anchor'] ) { $html_atts .= ' id=\"' . esc_attr( $attributes['anchor'] ) . '\"'; } if ( isset( $attributes['ghostkitSR'] ) && $attributes['ghostkitSR'] ) { $html_atts .= ' data-ghostkit-sr=\"' . esc_attr( $attributes['ghostkitSR'] ) . '\"'; } $result = '<div' . $html_atts . '>' . $result . '<\/div>'; } $result = apply_filters( 'lzb\/block_render\/output', $result, $attributes, $context ); $result = apply_filters( $block['slug'] . '\/' . $context . '_output', $result, $attributes ); $result = apply_filters( $block['slug'] . '\/output', $result, $attributes, $context ); return $result; } public function template_exists( $template_name, $args = array() ) { if ( ! empty( $args ) && is_array( $args ) ) { extract( $args ); } $template = locate_template( array( $template_name ) ); $template = apply_filters( 'lzb\/block_render\/template_exists', $template, $template_name, $args['attributes'], $args['block'], $args['context'] ); $template = apply_filters( $args['block']['slug'] . '\/' . $args['context'] . '_template_exists', $template, $template_name, $args['attributes'], $args['block'] ); $template = apply_filters( $args['block']['slug'] . '\/template_exists', $template, $template_name, $args['attributes'], $args['block'], $args['context'] ); $template = apply_filters( 'lzb\/template_exists', $template, $template_name, $args ); return file_exists( $template ); } public function include_template( $template_name, $args = array() ) { if ( ! empty( $args ) && is_array( $args ) ) { extract( $args ); } $template = locate_template( array( $template_name ) ); $template = apply_filters( 'lzb\/block_render\/include_template', $template, $args['attributes'], $args['block'], $args['context'] ); $template = apply_filters( $args['block']['slug'] . '\/' . $args['context'] . '_include_template', $template, $args['attributes'], $args['block'] ); $template = apply_filters( $args['block']['slug'] . '\/include_template', $template, $args['attributes'], $args['block'], $args['context'] ); $template = apply_filters( 'lzb\/include_template', $template, $template_name, $args ); if ( file_exists( $template ) )"},"a84bc3d1499e002ec7723262ce6e1a9f":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/redux-framework\/redux-templates\/classes\/class-api.php","exploit":"91535293","line":259,"match":"meta http-equiv=\"refresh\" content=\"0;"},"9a09dc52bac2a5c1370243d43cd42481":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/redux-framework\/redux-core\/inc\/classes\/class-redux-colors.php","exploit":"eval_strrev","line":94,"match":"lave"},"f5af0e4a274f7b728bb2b2f50636e42a":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/redux-framework\/redux-core\/inc\/classes\/class-redux-helpers.php","exploit":"7186bb8d","line":1099,"match":"suhosin"},"4c36b82b537cb597c63cc9022b56ba3a":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/redux-framework\/redux-core\/inc\/welcome\/views\/health-report.php","exploit":"7186bb8d","line":440,"match":"SUHOSIN"},"b76a72a5969ae65e8f00296f2d9ca96a":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/redux-framework\/redux-core\/inc\/welcome\/views\/health-report.php","exploit":"7186bb8d","line":443,"match":"Suhosin"},"d1981a907b0db65dfde7e826665c67a3":{"file":"\/wp-content\/themes\/wp-twig\/vendor\/redux-framework\/redux-core\/inc\/welcome\/views\/health-report.php","exploit":"7186bb8d","line":447,"match":"suhosin"}}